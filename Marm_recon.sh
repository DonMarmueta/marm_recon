# Marmota Recon - Domains and SubDomains
#!/bin/bash
# Define que o script ser√° interpretado pelo shell Bash

# Script de Reconhecimento de Dom√≠nios e Subdom√≠nios
# Code by Rafael Marmota - marmouts@proton.me

# Fun√ß√£o para exibir um banner com cores
function show_banner() {
    RED="\033[1;31m"   # Define a cor vermelha
    GREEN="\033[1;32m" # Define a cor verde
    BLUE="\033[1;34m"  # Define a cor azul
    CYAN="\033[1;36m"  # Define a cor ciano
    RESET="\033[0m"    # Reseta a cor para o padr√£o do terminal

    # Exibe o banner com as cores definidas
    echo -e "${GREEN}#############################################################${RESET}"
    echo -e "${BLUE}#       ${CYAN}Reconhecimento de Dom√≠nios e Subdom√≠nios          ${BLUE}#${RESET}"
    echo -e "${BLUE}#    ü¶´${CYAN}Code by Rafael Marmota - marmouts@proton.meü¶´     ${BLUE}#${RESET}"
    echo -e "${GREEN}#############################################################${RESET}"
}

# Fun√ß√£o para verificar depend√™ncias
function check_dependencies() {
    DEPENDENCIES=("assetfinder" "amass" "dnsrecon" "gobuster" "nmap") # Lista de depend√™ncias necess√°rias
    for dep in "${DEPENDENCIES[@]}"; do # Itera sobre cada depend√™ncia
        if ! command -v "$dep" &> /dev/null; then # Verifica se o comando existe no sistema
            echo "Erro: $dep n√£o est√° instalado. Instale antes de continuar." # Mensagem de erro se a depend√™ncia estiver ausente
            exit 1 # Encerra o script com c√≥digo de erro
        fi
    done
}

# Fun√ß√£o para exibir como usar o script
function show_usage() {
    echo "Uso: $0 -d dominio [-l lista_de_dominios] [-w wordlist] [-h]" # Explica os argumentos do script
    echo "Op√ß√µes:"
    echo "  -d dom√≠nio √∫nico para reconhecimento"
    echo "  -l arquivo contendo uma lista de dom√≠nios"
    echo "  -w wordlist para uso com Gobuster"
    echo "  -h mostra esta ajuda"
    exit 0 # Encerra ap√≥s exibir a ajuda
}

# Inicializa√ß√£o de vari√°veis
LOG_FILE=""             # Caminho para o arquivo de log (inicialmente vazio)
DOMAIN=""               # Vari√°vel para o dom√≠nio √∫nico
DOMAIN_LIST=""          # Vari√°vel para a lista de dom√≠nios
WORDLIST="/wordlist_compact.txt" # Caminho padr√£o para a wordlist do Gobuster

# Processar argumentos do script
while getopts "d:l:w:h" opt; do # L√™ as op√ß√µes passadas na linha de comando
    case $opt in
        d) DOMAIN=$OPTARG ;;   # Se "-d" for usado, armazena o dom√≠nio na vari√°vel DOMAIN
        l) DOMAIN_LIST=$OPTARG ;; # Se "-l" for usado, armazena o caminho do arquivo de lista
        w) WORDLIST=$OPTARG ;; # Se "-w" for usado, armazena o caminho da wordlist
        h) show_usage ;;       # Se "-h" for usado, exibe a ajuda
        *) echo "Op√ß√£o inv√°lida"; show_usage ;; # Para op√ß√µes inv√°lidas, exibe a ajuda
    esac
done

# Verifica se pelo menos um dom√≠nio ou uma lista de dom√≠nios foi fornecida
if [[ -z "$DOMAIN" && -z "$DOMAIN_LIST" ]]; then
    echo "Erro: Forne√ßa um dom√≠nio (-d) ou uma lista de dom√≠nios (-l)."
    show_usage
fi

# Verificar depend√™ncias
check_dependencies # Chama a fun√ß√£o para verificar depend√™ncias

# Mostrar o banner
show_banner # Exibe o banner no terminal

# Criar diret√≥rio principal de sa√≠da
RESULTS_DIR="./resultados_recon" # Define o diret√≥rio principal para salvar os resultados
mkdir -p "$RESULTS_DIR" # Cria o diret√≥rio, se ele ainda n√£o existir

# Ativar logging
LOG_FILE="$RESULTS_DIR/execution_log.txt" # Define o caminho do arquivo de log
exec > >(tee -a "$LOG_FILE") 2>&1 # Redireciona a sa√≠da do terminal para o arquivo de log

# Fun√ß√£o para processar um √∫nico dom√≠nio
function process_domain() {
    local DOMAIN=$1 # Recebe o dom√≠nio como argumento

    echo "## Processando dom√≠nio: $DOMAIN"

    # Criar pasta para o dom√≠nio
    DOMAIN_DIR="$RESULTS_DIR/$DOMAIN" # Define uma subpasta espec√≠fica para o dom√≠nio
    mkdir -p "$DOMAIN_DIR" # Cria a subpasta

    # Enumerando subdom√≠nios com Assetfinder
    echo "## Enumerando subdom√≠nios com Assetfinder..."
    assetfinder --subs-only "$DOMAIN" > "$DOMAIN_DIR/subdomains_assetfinder.txt" # Salva os resultados no arquivo correspondente

    # Enumerando subdom√≠nios com Amass
    echo "## Enumerando subdom√≠nios com Amass..."
    amass enum -d "$DOMAIN" -o "$DOMAIN_DIR/subdomains_amass.txt" # Salva os resultados no arquivo correspondente

    # Combinando resultados e removendo duplicados
    echo "## Combinando resultados e removendo duplicados..."
    cat "$DOMAIN_DIR/subdomains_assetfinder.txt" \
        "$DOMAIN_DIR/subdomains_amass.txt" | sort -u > "$DOMAIN_DIR/subdomains_final.txt" # Combina os arquivos e remove duplicados
    echo " - Subdom√≠nios encontrados: $DOMAIN_DIR/subdomains_final.txt"

    # Verificando resolu√ß√£o de DNS com Dnsrecon
    echo "## Verificando resolu√ß√£o de DNS com Dnsrecon..."
    while read -r subdomain; do
        dnsrecon -d "$subdomain" -t std >> "$DOMAIN_DIR/dnsrecon_results.txt" # Adiciona os resultados de DNS no arquivo
    done < "$DOMAIN_DIR/subdomains_final.txt"
    echo "## Dnsrecon finalizado. Resultados salvos em: $DOMAIN_DIR/dnsrecon_results.txt"

    # Enumerando diret√≥rios com Gobuster
    echo "## Enumerando diret√≥rios com Gobuster..."
    if [[ ! -f "$WORDLIST" ]]; then # Verifica se a wordlist existe
        echo "Erro: Wordlist n√£o encontrada em $WORDLIST."
        return
    fi
    gobuster dir -u "http://$DOMAIN" -w "$WORDLIST" -t 2 --status-codes-blacklist "301" -o "$DOMAIN_DIR/gobuster_results.txt"
    echo "## Gobuster finalizado. Resultados salvos em: $DOMAIN_DIR/gobuster_results.txt"

    # Varredura de portas com Nmap
    echo "## Realizando varredura de portas com Nmap..."
    nmap -T4 -sV -p- "$DOMAIN" -oN "$DOMAIN_DIR/nmap_results.txt"
    echo "## Nmap finalizado. Resultados salvos em: $DOMAIN_DIR/nmap_results.txt"

    # Compilando resultados finais
    echo "## Compilando resultados finais..."
    {
        echo "Resultados de Subdom√≠nios:"
        cat "$DOMAIN_DIR/subdomains_final.txt"
        echo ""
        echo "Resultados de DNS:"
        cat "$DOMAIN_DIR/dnsrecon_results.txt"
        echo ""
        echo "Resultados de Gobuster:"
        cat "$DOMAIN_DIR/gobuster_results.txt"
        echo ""
        echo "Resultados de Nmap:"
        cat "$DOMAIN_DIR/nmap_results.txt"
    } > "$DOMAIN_DIR/compiled_results.txt" # Cria um arquivo compilado com todos os resultados
    echo "## Resultados compilados salvos em: $DOMAIN_DIR/compiled_results.txt"
}

# Processar dom√≠nio √∫nico ou lista de dom√≠nios
if [[ -n "$DOMAIN" ]]; then
    process_domain "$DOMAIN" # Processa um √∫nico dom√≠nio
elif [[ -f "$DOMAIN_LIST" ]]; then
    while read -r domain; do
        process_domain "$domain" # Processa cada dom√≠nio na lista
    done < "$DOMAIN_LIST"
else
    echo "Erro: Arquivo de lista de dom√≠nios n√£o encontrado."
    exit 1 # Encerra com erro se a lista n√£o existir
fi

echo "## Reconhecimento finalizado. Resultados dispon√≠veis em: $RESULTS_DIR"
